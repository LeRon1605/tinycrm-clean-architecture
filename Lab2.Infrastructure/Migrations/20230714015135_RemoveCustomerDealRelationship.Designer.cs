// <auto-generated />
using System;
using Lab2.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Lab2.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230714015135_RemoveCustomerDealRelationship")]
    partial class RemoveCustomerDealRelationship
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Lab2.Domain.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Phone")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("TotalSales")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Accounts", (string)null);
                });

            modelBuilder.Entity("Lab2.Domain.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Phone")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Contacts", (string)null);
                });

            modelBuilder.Entity("Lab2.Domain.Entities.Deal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EstimatedRevenue")
                        .HasColumnType("int");

                    b.Property<int?>("LeadId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("LeadId")
                        .IsUnique()
                        .HasFilter("[LeadId] IS NOT NULL");

                    b.ToTable("Deals", (string)null);
                });

            modelBuilder.Entity("Lab2.Domain.Entities.DealLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DealId")
                        .HasColumnType("int");

                    b.Property<int>("PricePerUnit")
                        .HasColumnType("int");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DealId");

                    b.HasIndex("ProductId");

                    b.ToTable("DealLines", (string)null);
                });

            modelBuilder.Entity("Lab2.Domain.Entities.Lead", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EstimatedRevenue")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Leads", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Lab2.Domain.Entities.Product", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("Lab2.Domain.Entities.DisqualifiedLead", b =>
                {
                    b.HasBaseType("Lab2.Domain.Entities.Lead");

                    b.Property<DateTime>("DisqualifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("DisqualifiedLeads", (string)null);
                });

            modelBuilder.Entity("Lab2.Domain.Entities.QualifiedLead", b =>
                {
                    b.HasBaseType("Lab2.Domain.Entities.Lead");

                    b.Property<DateTime>("QualifiedDate")
                        .HasColumnType("datetime2");

                    b.ToTable("QualifiedLeads", (string)null);
                });

            modelBuilder.Entity("Lab2.Domain.Entities.Contact", b =>
                {
                    b.HasOne("Lab2.Domain.Entities.Account", "Account")
                        .WithMany("Contacts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Lab2.Domain.Entities.Deal", b =>
                {
                    b.HasOne("Lab2.Domain.Entities.Lead", "Lead")
                        .WithOne("Deal")
                        .HasForeignKey("Lab2.Domain.Entities.Deal", "LeadId");

                    b.Navigation("Lead");
                });

            modelBuilder.Entity("Lab2.Domain.Entities.DealLine", b =>
                {
                    b.HasOne("Lab2.Domain.Entities.Deal", "Deal")
                        .WithMany("Lines")
                        .HasForeignKey("DealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab2.Domain.Entities.Product", "Product")
                        .WithMany("Lines")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deal");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Lab2.Domain.Entities.Lead", b =>
                {
                    b.HasOne("Lab2.Domain.Entities.Account", "Customer")
                        .WithMany("Leads")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Lab2.Domain.Entities.DisqualifiedLead", b =>
                {
                    b.HasOne("Lab2.Domain.Entities.Lead", null)
                        .WithOne()
                        .HasForeignKey("Lab2.Domain.Entities.DisqualifiedLead", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Lab2.Domain.Entities.QualifiedLead", b =>
                {
                    b.HasOne("Lab2.Domain.Entities.Lead", null)
                        .WithOne()
                        .HasForeignKey("Lab2.Domain.Entities.QualifiedLead", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Lab2.Domain.Entities.Account", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("Leads");
                });

            modelBuilder.Entity("Lab2.Domain.Entities.Deal", b =>
                {
                    b.Navigation("Lines");
                });

            modelBuilder.Entity("Lab2.Domain.Entities.Lead", b =>
                {
                    b.Navigation("Deal");
                });

            modelBuilder.Entity("Lab2.Domain.Entities.Product", b =>
                {
                    b.Navigation("Lines");
                });
#pragma warning restore 612, 618
        }
    }
}
